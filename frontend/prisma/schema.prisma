datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password      Password?
  notes         Note[]
  registrations Registration[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @id @map("_id") @db.ObjectId
}

model Note {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Course {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  category           String
  positionInCategory Int            @default(1)
  numberOfDays       Int            @default(3)
  offerings          Offering[]
  registrations      Registration[]
}

model Offering {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  startDate     DateTime
  hasSpace      Boolean        @default(true)
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId      String
  registrations Registration[]
}

model Registration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId   String
  status     String   @default("pending")
  offering   Offering @relation(fields: [offeringId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offeringId String
}
